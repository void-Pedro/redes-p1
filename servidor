'''
Trabalho feito por:
    Pedro Henrique Borges - RA 804071
    
Passos feitos até o momento (ir atualizando conforme for fazendo): 1-4
'''


#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
apelidosUsados = {}
canais = {}
dados_residuais = b''

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    
    dados = trataEntradas(conexao, dados)
    
    
    for dado in dados:
        comando = dado.split(b'', 1)[0]
        if comando == b'PING':
            cmdPing(conexao, dado)
        elif comando == b'NICK':
            cmdNick(conexao, dado)
        #elif comando == b'PRIVMSG':
            
            
    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.dados_residuais = b''
    conexao.registrar_recebedor(dados_recebidos)

# Resolução do Passo 1
def cmdPing(conexao, dados):
    resposta = b':server PONG server :'
    resposta += dados.split(b'', 1)[1] # Resposta + payload
    conexao.enviar(resposta)

# Resolução do Passo 3/4
def cmdNick(conexao, dados):
    nickAntigo = usuarioConexao(conexao)
    nick = dados.split(b'', 1)[1]
    valido = validar_nome(nick)
    if not valido:
        conexao.enviar(b'server 432 apelido_atual apelido :Erroneous nickname')
        return
    else: 
        if(nick.lower() in apelidosUsados):
            conexao.enviar (b':server 433 ' + nickAntigo + b' ' + nick + b' :Nickname is already in use\r\n')
            return
        
        # Usuário não definiu o apelido ainda
        elif(nick.lower() not in apelidosUsados and nickAntigo == b'guest'):
            apelidosUsados[nick.lower()] = conexao
            conexao.enviar(b':server 001 ' + nick + b' :Welcome\r\n')
            conexao.enviar(b':server 422 ' + nick + b' :MOTD File is missing\r\n')
            return
        
        # Usuário quer trocar o apelido
        else:
            apelidosUsados[nick.lower()] = apelidosUsados.pop(nickAntigo.lower())
            conexao.enviar(b':' + nickAntigo + b' NICK ' + nick + b'\r\n')
            return

# Resolução do Passo 5
def privMsg(conexao, destinatario, dados):
    destinatario = dados.split(b'', 1)[1]
    msg = dados.split(b'', 1)[2]
    remetente = usuarioConexao(conexao)
    if destinatario.lower() not in apelidosUsados:
        return
        
        
#def cmdPart(conexao, dado):

# Resolução do Passo 2
def trataEntradas(conexao, dados):
    """
    Função criada para tratar as entradas. Situações suportadas:
        Uma mensagem do tipo "linha\r\n" pode ser quebrada em várias partes. Por exemplo, podemos receber primeiro "lin", depois "h" e depois "a\r\n".
        
        Duas ou mais mensagens podem ser recebidas de uma só vez. Por exemplo, podemos receber "linha 1\r\nlinha 2\r\nlinha 3\r\n".
        
        As duas coisas também podem acontecer ao mesmo tempo. Podemos receber, por exemplo, algo do tipo "a 1\r\nlinha 2\r\nli".
    """
    if conexao.dados_residuais != b'':
        dados = conexao.dados_residuais + dados
        conexao.dados_residuais = b''
    
    # Verifica se existe um comando "completo" nos dados
    if b'\n' in dados:
        dados = dados.split(b'\n')
        for i in range(len(dados) - 1):
                dados[i] = dados[i] + b'\n'
        if dados[-1] != b'\n':
            conexao.dados_residuais = dados[-1]
            dados[-1] = b''
    else: # Último comando incompleto
        conexao.dados_residuais = conexao.dados_residuais + dados
        dados = []
    return dados

# Função para encontrar o nick do usuário baseado na conexão (auxilio para o passo 3/4)
def usuarioConexao(conexao):
    for chave, valor in apelidosUsados.items():
        if conexao == valor:
            return chave
    return b'guest'

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
